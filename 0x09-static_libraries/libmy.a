!<arch>
0-isupper.c/    0           0     0     644     220       `
#include "main.h"

/**
*_isupper - Checks for uppercase characters
*
*@c: Number to be checked
*
*Return: 1 (Sucess) OR 0 (Failure)
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     441       `
#include "main.h"

/**
*_memset - fills the first @n bytes of the memory area pointed
*to by @s with the constant byte of @b
*
*@s: Pointer to a memory area
*
*@b: Value that is to fill up memory area @s
*
*@n: number of bytes of memory area @s to be filled with @b
*
*Return: Pointer to the memory area @s
*/

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}


0-strcat.c/     0           0     0     644     407       `
#include "main.h"

/**
*_strcat - concatenates two strings
*
*@dest: destination string; src string is appended to it
*
*@src: Source string; gets appended to dest string
*
*Return: Pointer to dest
*/

char *_strcat(char *dest, char *src)
{
	int i = 0;

	int j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0')
	{
		*(dest + i) = src[j];
		j++;
		i++;
	}
	*(dest + i) = '\0';
	return (dest);
}


100-atoi.c/     0           0     0     644     431       `
#include "main.h"

/**
*_atoi - convert a number in a string to an integer
*
*@s: String to be converted
*
*Return: converted integer OR 0 if none
*/

int _atoi(char *s)
{
	int sign_cache = 1;

	int result = 0;

	while (s[0] != '\0')
	{
		if (s[0] == '-')
			sign_cache *= -1;
		else if (s[0] >= '0' && s[0] <= '9')
			result = (result * 10) + (s[0] - '0') * sign_cache;
		else if (result)
			break;
		s++;
	}
	return (result);
}


1-isdigit.c/    0           0     0     644     188       `
#include "main.h"

/**
*_isdigit - Checks for numbers
*
*@c: character to checked
*
*Return: 1 OR 0
*/

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     359       `
#include "main.h"

/**
*_memcpy - Copies content from source to destination
*memory area
*
*@src: Source memory area
*
*@dest: Destination memory area
*
*@n: Number of bytes
*
*Return: A pointer to @dest
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}


1-strncat.c/    0           0     0     644     508       `
#include "main.h"

/**
*_strncat - Concatenates two strings using @ bytes
*
*@dest: Destination String; src string is appended to it
*
*@src: Source string; gets appended to dest string
*
*@n: Number of bytes of src that should be concatenated with dest
*
*Return: Pointer to dest
*/

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;

	int j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0' && n != j)
	{
		*(dest + i) = src[j];
		j++;
		i++;
	}
	*(dest + i) = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     272       `
#include "main.h"

/**
*_strchr - Loctes a character in a string
*
*@s: The string to check
*
*@c: The character to find
*
*Return: Pointer to @s or NULL
*
*/

char *_strchr(char *s, char c)
{
	while (*s)
	{
		s++;
		if (*s == c)
		{
			return (s);
		}
	}
	return (0);
}

2-strlen.c/     0           0     0     644     249       `
#include "main.h"

/**
*_strlen - Returns the length of a string
*
*@s: The character containing the string
*
*Return: The length of the character
*/

int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}


2-strncpy.c/    0           0     0     644     463       `
#include "main.h"

/**
*_strncpy - Copies a string up to @n bytes
*
*@dest: Destination string; src string is copied to it
*
*@src: Source string; contains content to be copied
*
*@n: Number of bytes of src that should be copied to dest
*
*Return: Pointer to dest
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (src[i] != '\0' && i < n)
	{
		*(dest + i) = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}


3-islower.c/    0           0     0     644     221       `
#include "main.h"

/**
*_islower - Checks for lowercase character
*
*@c: Number to be checked
*
*Return: 1 (Success) OR 0 (Failure)
*/

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}


3-puts.c/       0           0     0     644     175       `
#include <stdio.h>

/**
*_puts - Print a string folllowed by a new line.
*
*@str: String to be printed
*
*Return: Nothing
*/

void _puts(char *str)
{
	printf("%s\n", str);
}


3-strcmp.c/     0           0     0     644     349       `
#include "main.h"

/**
*_strcmp - Compare two strings
*
*@s1: First string
*
*@s2: Second string
*
*Return: 0 if equal, less than 1 or greater than 1
*/

int _strcmp(char *s1, char *s2)
{
	int diff = 0;

	int i = 0;

	while (s1[i])
	{
		if (s1[i] != s2[i])
		{
			diff = ((s1[i] - '\0') - (s2[i] - '\0'));
			break;
		}
		i++;
	}
	return (diff);
}


3-strspn.c/     0           0     0     644     379       `
#include "main.h"
#include <stdio.h>

/**
*_strspn - Get the length of a prefix substring
*
*@s: The character to print
*
*@accept: Character
*
*Return: unsigned int
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}
	}
	return (i);
}


4-isalpha.c/    0           0     0     644     249       `
#include "main.h"

/**
*_isalpha - Checks for Alphabetic Characters
*
*@c: Alphabetic character
*
*Return: 1 (Success) OR 0 (Failure)
*/

int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
		return (1);
	else
		return (0);
}


4-strpbrk.c/    0           0     0     644     362       `
#include "main.h"

/**
*_strpbrk - Searches a string for any of a set of bytes
*
*@s: Character to check
*
*@accept: Character to look for
*
*Return: Character
*/

char *_strpbrk(char *s, char *accept)
{
	int i, k;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (k = 0; accept[k] != '\0'; k++)
		{
			if (s[i] == accept[k])
				return (s + i);
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     408       `
#include "main.h"

/**
*_strstr - Locating a substring
*
*@needle: Occurance to find
*
*@haystack: String to search
*
*Return: Pointer
*/

char *_strstr(char *haystack, char *needle)
{
	while (*haystack)
	{
		char *src = haystack;

		char *sub = needle;

		while (*haystack && *sub && *haystack == *sub)
		{
			haystack++;
			sub++;
		}
		if (!*sub)
			return (src);
		haystack = src + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     210       `
#include "main.h"

/**
*_abs - COmputes the absolute value of an integer
*
*@a: The integer to be computed
*
*Return: Absolute value
*/

int _abs(int a)
{
	if (a >= 0)
		return (a);
	else
		return (a * -1);
}

9-strcpy.c/     0           0     0     644     327       `
#include "main.h"

/**
*_strcpy - Copy strings from source arr to destination arr
*
*@dest: destination array
*@src: source array
*
*Return: Pointer to destination array
*/

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		*(dest + i) = src[i];
		i++;
	}
	*(dest + i) = '\0';
	return (dest);
}


_putchar.c/     0           0     0     644     242       `
#include <unistd.h>

/**
*_putchar - Write the character c to stdout
*
*@c: The character to print
*
*Return: On success 1.
*
*On error, -1 is returned, and errno is set appropriately.
*/

int _putchar(char c)
{
	return (write(1, &c, 1));
}

